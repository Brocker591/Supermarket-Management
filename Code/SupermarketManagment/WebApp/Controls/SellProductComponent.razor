@inject UseCases.UseCaseInterfaces.IGetProductByIdUseCase GetProductByIdUseCase
@inject UseCases.UseCaseInterfaces.ISellProductUseCase SellProductUseCase

@if(SelectedProduct != null)
{
    @if(!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger">@errorMessage</div>
    }

    <EditForm Model="productToSell" OnValidSubmit="SellProduct">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <ValidationSummary></ValidationSummary>


    <div class="form-group">
        <label for="name">Product Name</label>
        <input class="form-control" type="text" readonly value="@productToSell.Name"/>
    </div>

    <div class="form-group">
        <label for="name">Price</label>
        <input class="form-control" id="price" type="text" readonly value="@(string.Format("{0:c}",productToSell.Price))"/>
    </div>

    <div class="form-group">
        <label for="qty">Quantity</label>
        <InputNumber class="form-control" id=qty  @bind-Value="@productToSell.Quantity" ></InputNumber>
    </div>
    <button type="submit" class="btn btn-primary">Sell</button>
    </EditForm>



    
}




@code {
    private Product productToSell;
    private string errorMessage;

    [Parameter]
    public string CashierName{ get; set; }

    [Parameter]
    public Product SelectedProduct{ get; set; }

    [Parameter]
    public EventCallback<Product> OnProductSold {  get;  set; }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        if(SelectedProduct != null)
        {
            productToSell = new Product
            {
                ProductId = SelectedProduct.ProductId,
                Name = SelectedProduct.Name,
                CategoryId = SelectedProduct.CategoryId,
                Price = SelectedProduct.Price,
                Quantity = 0

            };
        }
        else
        {
            productToSell = null;
        }

    }

    private void SellProduct()
    {
        if (string.IsNullOrWhiteSpace(CashierName))
        {
            errorMessage = "Cashier's name is missing";
            return;
        }


        var product = GetProductByIdUseCase.Execute(productToSell.ProductId);

        if(productToSell.Quantity <= 0)
        {
            errorMessage = "The qunatity has to be greater than zero";
        }
        else if(product.Quantity >= productToSell.Quantity)
        {
            OnProductSold.InvokeAsync(productToSell);
            errorMessage = string.Empty;
            SellProductUseCase.Execute(CashierName, productToSell.ProductId, productToSell.Quantity.Value);
        }
        else
        {
            errorMessage = $"{product.Name} only has {product.Quantity} left. It is not enough";
        }

        
    }
}
